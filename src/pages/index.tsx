import Head from 'next/head';

import { fakePersons, makeFakePeople } from '@app/utils/fake-data';
import AppTable from '@app/components/app-table';
import { ColumnDef, RowSelectionState, createColumnHelper } from '@tanstack/react-table';
import { Person } from '@app/types';
import { use, useCallback, useEffect, useReducer, useRef, useState } from 'react';
import { faker } from '@faker-js/faker';

const personColumnHelper = createColumnHelper<Person>();

const columns: ColumnDef<Person, any>[] = [
  personColumnHelper.accessor('title', {
    header: 'Title',
  }),

  personColumnHelper.accessor('name', {
    header: 'Name',
  }),

  personColumnHelper.accessor('gender', {
    header: 'Gender',
  }),

  personColumnHelper.accessor('age', {
    header: 'Age',
  }),

  personColumnHelper.accessor('address', {
    header: 'Address',
  }),

  personColumnHelper.accessor('bio', {
    header: 'Bio',
  }),
];

interface TableAction {
  type: 'SELECT_RADIO_ITEM' | 'SELECT_CHECKBOX_ITEM';
  payload: any;
}

interface PageTableSelectionState {
  selectedRadioItem: Person;
  selectedCheckBoxItems: Person[];
}

const stateReducer = (state: PageTableSelectionState, action: TableAction) => {
  switch (action.type) {
    case 'SELECT_RADIO_ITEM':
      console.log('SELECT_RADIO_ITEM', action.payload);
      return {
        ...state,
        selectedRadioItem: action.payload,
      };
    case 'SELECT_CHECKBOX_ITEM':
      return {
        ...state,
        selectedCheckBoxItems: [...action.payload],
      };

    default:
      return state;
  }
  return state;
};

export default function Home() {
  const [state, dispatch] = useReducer(stateReducer, {
    selectedRadioItem: undefined,
    selectedCheckBoxItems: [],
  });

  // const [fakePersons, setFakePersons] = useState<Person[]>([]);

  const [selectedRadioItem, setSelectedRadioItem] = useState<RowSelectionState>({});
  const [selectedCheckBoxItems, setSelectedCheckBoxItems] = useState<RowSelectionState>({});

  const getRowId = useCallback((row) => row.id, []);

  const radioTableRef = useRef(null);
  const checkboxTableRef = useRef(null);

  useEffect(() => {
    console.log('page rendered');
  }, []);

  useEffect(() => {
    dispatch({
      type: 'SELECT_RADIO_ITEM',
      payload: radioTableRef.current?.getSelectedRows?.(),
    });
  }, [selectedRadioItem]);

  useEffect(() => {
    dispatch({
      type: 'SELECT_CHECKBOX_ITEM',
      payload: checkboxTableRef.current?.getSelectedRows?.(),
    });
  }, [selectedCheckBoxItems]);

  return (
    <>
      <Head>
        <title>Tanstack Wrapper</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div style={{ width: '100%', margin: '0' }}>
          <div
            style={{
              display: 'flex',
              flexDirection: 'column',
              justifyContent: 'center',
              alignItems: 'center',
            }}
          >
            <h4 style={{ marginBottom: '10px' }}>Next.js Tanstack Table Wrapper example in TypeScript</h4>
          </div>
          <div
            style={{
              paddingTop: '20px',
              paddingBottom: '20px',
            }}
          >
            {fakePersons.length && (
              <AppTable
                data={fakePersons}
                columns={columns}
                getRowId={getRowId}
                clientSidePagination={true}
                pageSize={5}
              />
            )}
          </div>
          <div
            style={{
              paddingTop: '20px',
              paddingBottom: '20px',
            }}
          >
            {fakePersons.length && (
              <AppTable
                data={fakePersons}
                columns={columns}
                getRowId={getRowId}
                clientSidePagination={true}
                pageSize={5}
                selectionMode="single"
                rowSelection={selectedRadioItem}
                setRowSelection={setSelectedRadioItem}
                ref={radioTableRef}
              />
            )}
          </div>
          <div
            style={{
              paddingTop: '40px',
              paddingBottom: '40px',
            }}
          >
            {fakePersons.length && (
              <AppTable
                data={fakePersons}
                columns={columns}
                getRowId={getRowId}
                clientSidePagination={true}
                pageSize={5}
                selectionMode="multiple"
                rowSelection={selectedCheckBoxItems}
                setRowSelection={setSelectedCheckBoxItems}
                ref={checkboxTableRef}
              />
            )}
          </div>
          <div
            style={{
              position: 'fixed',
              bottom: 0,
              right: 0,
              width: '25vw',
              top: 0,
              border: '1px solid rgba(0, 0, 0, 0.23)',
            }}
          >
            <div style={{ padding: '20px' }}>
              <h6 style={{ marginBottom: '20px' }}>Selected Radio Item from local state</h6>
              <pre>{JSON.stringify(selectedRadioItem, null, 2)}</pre>
              <h6 style={{ marginBottom: '20px' }}>Selected Radio Item from app state</h6>
              <pre>{JSON.stringify(state.selectedRadioItem, null, 2)}</pre>
              <h6 style={{ marginBottom: '20px' }}>Selected Checkdiv Items from local state</h6>
              <pre>{JSON.stringify(selectedCheckBoxItems, null, 2)}</pre>
              <h6 style={{ marginBottom: '20px' }}>Selected Checkdiv Items from app state</h6>
              <pre>{JSON.stringify(state.selectedCheckBoxItems, null, 2)}</pre>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
